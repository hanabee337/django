From 434ec70b758c9f1f187f7d057e38b8e54f11bf7b Mon Sep 17 00:00:00 2001
From: hanabee337 <hanabee337@gmail.com>
Date: Mon, 13 Feb 2017 12:00:53 +0900
Subject: [PATCH 1/3] first commit

Signed-off-by: hanabee337 <hanabee337@gmail.com>
---
 .gitignore                                   | 154 +++++++++++++++++++++++++++
 .idea/instagram.iml                          |  13 +++
 .idea/misc.xml                               |   4 +
 .idea/modules.xml                            |   8 ++
 django_app/instagram/__init__.py             |   0
 django_app/instagram/settings.py             | 125 ++++++++++++++++++++++
 django_app/instagram/urls.py                 |  21 ++++
 django_app/instagram/wsgi.py                 |  16 +++
 django_app/manage.py                         |  22 ++++
 django_app/member/__init__.py                |   0
 django_app/member/admin.py                   |   7 ++
 django_app/member/apps.py                    |   5 +
 django_app/member/migrations/0001_initial.py |  30 ++++++
 django_app/member/migrations/__init__.py     |   0
 django_app/member/models.py                  |  24 +++++
 django_app/member/tests.py                   |   3 +
 django_app/member/views.py                   |   3 +
 17 files changed, 435 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .idea/instagram.iml
 create mode 100644 .idea/misc.xml
 create mode 100644 .idea/modules.xml
 create mode 100644 django_app/instagram/__init__.py
 create mode 100644 django_app/instagram/settings.py
 create mode 100644 django_app/instagram/urls.py
 create mode 100644 django_app/instagram/wsgi.py
 create mode 100755 django_app/manage.py
 create mode 100644 django_app/member/__init__.py
 create mode 100644 django_app/member/admin.py
 create mode 100644 django_app/member/apps.py
 create mode 100644 django_app/member/migrations/0001_initial.py
 create mode 100644 django_app/member/migrations/__init__.py
 create mode 100644 django_app/member/models.py
 create mode 100644 django_app/member/tests.py
 create mode 100644 django_app/member/views.py

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..9b8e6cf
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,154 @@
+
+# Created by https://www.gitignore.io/api/pycharm,django,python
+
+### Django ###
+*.log
+*.pot
+*.pyc
+__pycache__/
+local_settings.py
+db.sqlite3
+media
+
+### PyCharm ###
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff:
+.idea/workspace.xml
+.idea/tasks.xml
+
+# Sensitive or high-churn files:
+.idea/dataSources/
+.idea/dataSources.ids
+.idea/dataSources.xml
+.idea/dataSources.local.xml
+.idea/sqlDataSources.xml
+.idea/dynamic.xml
+.idea/uiDesigner.xml
+
+# Gradle:
+.idea/gradle.xml
+.idea/libraries
+
+# Mongo Explorer plugin:
+.idea/mongoSettings.xml
+
+## File-based project format:
+*.iws
+
+## Plugin-specific files:
+
+# IntelliJ
+/out/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+fabric.properties
+
+### PyCharm Patch ###
+# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721
+
+# *.iml
+# modules.xml
+# .idea/misc.xml
+# *.ipr
+
+### Python ###
+# Byte-compiled / optimized / DLL files
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+env/
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*,cover
+.hypothesis/
+
+# Translations
+*.mo
+
+# Django stuff:
+
+# Flask stuff:
+instance/
+.webassets-cache
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# Jupyter Notebook
+.ipynb_checkpoints
+
+# pyenv
+.python-version
+
+# celery beat schedule file
+celerybeat-schedule
+
+# dotenv
+.env
+
+# virtualenv
+.venv/
+venv/
+ENV/
+
+# Spyder project settings
+.spyderproject
+
+# Rope project settings
+.ropeproject
+
+# End of https://www.gitignore.io/api/pycharm,django,python
diff --git a/.idea/instagram.iml b/.idea/instagram.iml
new file mode 100644
index 0000000..3e38fa0
--- /dev/null
+++ b/.idea/instagram.iml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/django_app" isTestSource="false" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.4.3 virtualenv at ~/.pyenv/versions/3.4.3/envs/django_instagram_env" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="TestRunnerService">
+    <option name="PROJECT_TEST_RUNNER" value="Unittests" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..d4f07b2
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.4.3 virtualenv at ~/.pyenv/versions/3.4.3/envs/django_instagram_env" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..2bdd280
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/instagram.iml" filepath="$PROJECT_DIR$/.idea/instagram.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/django_app/instagram/__init__.py b/django_app/instagram/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/django_app/instagram/settings.py b/django_app/instagram/settings.py
new file mode 100644
index 0000000..8d8aa04
--- /dev/null
+++ b/django_app/instagram/settings.py
@@ -0,0 +1,125 @@
+"""
+Django settings for instagram project.
+
+Generated by 'django-admin startproject' using Django 1.10.5.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/1.10/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/1.10/ref/settings/
+"""
+
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+STATIC_DIR = os.path.join(BASE_DIR, 'static')
+STATICFILES_DIR = [
+    STATIC_DIR,
+]
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'fz$w7cf2p+t6=618g206eci35yx^+f(jtk4o^w%2@q*a8o5)at'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+
+    'member.apps.MemberConfig',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'instagram.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'instagram.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/1.10/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/1.10/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/django_app/instagram/urls.py b/django_app/instagram/urls.py
new file mode 100644
index 0000000..4334aa5
--- /dev/null
+++ b/django_app/instagram/urls.py
@@ -0,0 +1,21 @@
+"""instagram URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/1.10/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.conf.urls import url, include
+    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))
+"""
+from django.conf.urls import url
+from django.contrib import admin
+
+urlpatterns = [
+    url(r'^admin/', admin.site.urls),
+]
diff --git a/django_app/instagram/wsgi.py b/django_app/instagram/wsgi.py
new file mode 100644
index 0000000..5de356c
--- /dev/null
+++ b/django_app/instagram/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for instagram project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "instagram.settings")
+
+application = get_wsgi_application()
diff --git a/django_app/manage.py b/django_app/manage.py
new file mode 100755
index 0000000..8fc5353
--- /dev/null
+++ b/django_app/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "instagram.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError:
+        # The above import may fail for some other reason. Ensure that the
+        # issue is really that Django is missing to avoid masking other
+        # exceptions on Python 2.
+        try:
+            import django
+        except ImportError:
+            raise ImportError(
+                "Couldn't import Django. Are you sure it's installed and "
+                "available on your PYTHONPATH environment variable? Did you "
+                "forget to activate a virtual environment?"
+            )
+        raise
+    execute_from_command_line(sys.argv)
diff --git a/django_app/member/__init__.py b/django_app/member/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/django_app/member/admin.py b/django_app/member/admin.py
new file mode 100644
index 0000000..f15977b
--- /dev/null
+++ b/django_app/member/admin.py
@@ -0,0 +1,7 @@
+from django.contrib import admin
+
+from .models import MyUser
+
+# Register your models here.
+
+admin.site.register(MyUser)
diff --git a/django_app/member/apps.py b/django_app/member/apps.py
new file mode 100644
index 0000000..d0a56b3
--- /dev/null
+++ b/django_app/member/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+
+class MemberConfig(AppConfig):
+    name = 'member'
diff --git a/django_app/member/migrations/0001_initial.py b/django_app/member/migrations/0001_initial.py
new file mode 100644
index 0000000..2b1403b
--- /dev/null
+++ b/django_app/member/migrations/0001_initial.py
@@ -0,0 +1,30 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.10.5 on 2017-02-13 02:56
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='MyUser',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('date_joined', models.DateTimeField(auto_created=True)),
+                ('username', models.CharField(max_length=200)),
+                ('last_name', models.CharField(max_length=200)),
+                ('first_name', models.CharField(max_length=200)),
+                ('nickname', models.CharField(max_length=200)),
+                ('email', models.EmailField(max_length=254)),
+                ('last_modified', models.DateTimeField(auto_now_add=True)),
+                ('following', models.ManyToManyField(to='member.MyUser')),
+            ],
+        ),
+    ]
diff --git a/django_app/member/migrations/__init__.py b/django_app/member/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/django_app/member/models.py b/django_app/member/models.py
new file mode 100644
index 0000000..cd893ed
--- /dev/null
+++ b/django_app/member/models.py
@@ -0,0 +1,24 @@
+from django.db import models
+
+
+# from django.contrib.auth import
+
+# Create your models here.
+
+class MyUser(models.Model):
+    username = models.CharField(max_length=200,
+                                unique=True)
+    last_name = models.CharField(max_length=200)
+    first_name = models.CharField(max_length=200)
+    nickname = models.CharField(max_length=200)
+    email = models.EmailField()
+    date_joined = models.DateTimeField(auto_created=True)
+    last_modified = models.DateTimeField(auto_now_add=True)
+
+    following = models.ManyToManyField(
+        'self',
+        symmetrical=False,
+    )
+
+    def __str__(self):
+        return self.username
diff --git a/django_app/member/tests.py b/django_app/member/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/django_app/member/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/django_app/member/views.py b/django_app/member/views.py
new file mode 100644
index 0000000..91ea44a
--- /dev/null
+++ b/django_app/member/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
-- 
2.7.4

